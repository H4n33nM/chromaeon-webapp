---
import Layout from "../layouts/Layout.astro";
import "../styles/global.css";
---

<Layout>
  <head>
    <link
      href="https://fonts.googleapis.com/css2?family=Advent+Pro:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>

  <div id="container">
    <div id="error-message" class="error-message">
      Invalid username or password
    </div>
    <main>
      <section id="hero">
        <h1>You're one click away to a world of imagination!</h1>
      </section>

      <div class="content-wrapper">
        <section class="login-form">
          <form class="form-container" id="loginForm">
            <div class="form-group">
              <label for="username">Username</label>
              <input type="text" id="username" name="username" required />
              <span class="error-message" id="username-error"></span>
            </div>

            <div class="form-group">
              <label for="password">Password</label>
              <input type="password" id="password" name="password" required />
              <span class="error-message" id="password-error"></span>
            </div>

            <button type="submit" class="submit-btn">
              Login
              <div class="loading-spinner"></div>
            </button>
          </form>
        </section>
      </div>
    </main>
  </div>
</Layout>

<style>
  #container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    position: relative;
    padding: 3rem 0;
    font-family: "Advent Pro", sans-serif;
  }

  main {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    min-height: 100%;
  }

  #hero {
    text-align: center;
    max-width: 800px;
    margin: 2rem auto 1rem;
    padding-bottom: 1rem;
  }

  #hero h1 {
    font-size: 2.5rem;
    color: #ffffff;
    margin: 0;
    line-height: 1.2;
    font-family: "Advent Pro", sans-serif;
    font-weight: 600;
  }

  .content-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto 2rem;
    padding: 0 2rem;
    position: relative;
  }

  .login-form {
    width: 100%;
    max-width: 500px;
    background: #54b4e2;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 2rem;
    margin: 0 auto;
    margin-bottom: 5rem;
  }

  .form-container {
    display: flex;
    flex-direction: column;
    gap: 1.75rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.6rem;
  }

  label {
    font-weight: 500;
    color: #e7f7ff;
    font-family: "Advent Pro", sans-serif;
  }

  input {
    padding: 0.875rem;
    border: 2px solid #6461ab;
    border-radius: 4px;
    font-size: 1.1rem;
    transition: all 0.2s ease;
    background-color: #e7f7ff;
    color: #6461ab;
    font-family: "Advent Pro", sans-serif;
  }

  input:focus {
    outline: none;
    border-color: #d1aeff;
    box-shadow: 0 0 0 2px rgba(209, 174, 255, 0.2);
  }

  .submit-btn {
    padding: 0.75rem;
    background-color: #6461ab;
    color: #e7f7ff;
    border: none;
    border-radius: 4px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    font-family: "Advent Pro", sans-serif;
  }

  .submit-btn:hover {
    background-color: #7673bd;
  }

  .submit-btn:disabled {
    background-color: #9997c4;
    cursor: not-allowed;
  }

  .error-message {
    color: #ffe7e7;
    font-size: 0.875rem;
    margin-top: 0.25rem;
    display: none;
    font-family: "Advent Pro", sans-serif;
  }

  input.error {
    border-color: #e61b1b;
    background-color: #ffe7e7;
  }

  #error-message {
    position: fixed;
    top: 20px;
    right: 20px;
    background: #e74c3c;
    color: white;
    padding: 1rem 2rem;
    border-radius: 4px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateX(120%);
    transition: transform 0.3s ease;
    z-index: 9999;
    font-weight: 500;
    pointer-events: none;
  }

  #error-message.show {
    transform: translateX(0);
  }

  .loading-spinner {
    display: none;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 50%;
    border-top-color: white;
    animation: spin 1s ease-in-out infinite;
    position: absolute;
    right: 1rem;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  .submit-btn.loading .loading-spinner {
    display: block;
  }

  @media (max-width: 768px) {
    #container {
      padding: 2rem 0;
    }

    #hero {
      margin: 1rem auto 0.75rem;
    }

    .content-wrapper {
      margin-bottom: 1.5rem;
    }

    main {
      padding: 1rem;
    }

    #hero {
      padding-bottom: 0.75rem;
    }

    .login-form {
      max-width: 100%;
      padding: 1.5rem;
      margin-bottom: 2rem;
    }

    #hero h1 {
      font-size: 2rem;
    }
  }
</style>

<script>
  const form = document.getElementById("loginForm") as HTMLFormElement;
  const errorMessage = document.getElementById("error-message") as HTMLElement;

  if (!form) {
    console.error("Login form not found");
    throw new Error("Login form not found");
  }

  if (!errorMessage) {
    console.error("Error message element not found");
    throw new Error("Error message element not found");
  }

  // Get accounts from localStorage
  function getAccounts(): any[] {
    const accounts = localStorage.getItem("accounts");
    return accounts ? JSON.parse(accounts) : [];
  }

  // Form submission handler
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Disable submit button and show loading state
    const submitBtn = form.querySelector(".submit-btn") as HTMLButtonElement;
    submitBtn.disabled = true;
    submitBtn.classList.add("loading");

    try {
      // Get form data
      const formData = new FormData(form);
      const username = formData.get("username") as string;
      const password = formData.get("password") as string;

      // Get stored accounts
      const accounts = getAccounts();

      // Find matching account
      const account = accounts.find(
        (acc) => acc.username === username && acc.password === password
      );

      if (account) {
        // Store current user in localStorage
        localStorage.setItem("currentUser", JSON.stringify(account));

        // Log successful login
        console.log("Login successful!");
        console.log("Logged in user:", account);
        console.log(
          "Current user in localStorage:",
          JSON.parse(localStorage.getItem("currentUser") || "{}")
        );

        // Redirect to homepage
        window.location.href = "/";
      } else {
        // Log failed login attempt
        console.log("Login failed: Invalid credentials");
        console.log("Attempted login with:", { username, password });
        console.log("Available accounts:", accounts);

        // Show error message
        errorMessage.classList.add("show");
        setTimeout(() => {
          errorMessage.classList.remove("show");
        }, 3000);
      }
    } catch (error) {
      console.error("Error during login:", error);
      errorMessage.classList.add("show");
      setTimeout(() => {
        errorMessage.classList.remove("show");
      }, 3000);
    } finally {
      // Re-enable submit button
      submitBtn.disabled = false;
      submitBtn.classList.remove("loading");
    }
  });
</script>
